@startuml

class Register {
  -Value value (1..1)

  +fetch(): Value
  +store(Value value)
}

class ProgramCounter {
  -Value value (1..1)
  +store(Value value)
  +instructionNumber(): int
}

class Registers {
  -Register[] registers(32..32)

  +fetch(int idx): Value
  +store(int idx, Value value)
}

class Inbox {
  -Stack stack (1..1)
}

class Stacks {
  -Stack[] stack (8..8)

  +push(int idx, Value value)
  +pop(int idx): Optional<Value>
}

class Stack {
  -Deque<Value> deque (1..1)

  +push(Value value)
  +add(Value value)
  +pop(): Optional<Value>
}

class Outbox
{
  -Stack stack (1..1)
}

class ALU {
  -Value a (1..1)
  -Value b (1..1)

  +storeA(Value a)
  +storeB(Value b)

  +add(): Value
  +subtract(): Value
}

class Memory {
  -MemoryCell[] cells (65536..65536)

  +fetch(int address): Value
  +store(int address, Value value)
}

class MemoryCell {
 -Value value (1..1)

 +fetch(): Value
 +store(Value value)
}

class Value {
  -int value (1..1)

  +asNumber(): int
  +asCharachter(): char
  +increment(): Value
  +decrement(): Value
  +plus(Value value): Value
  +minus(Value value): Value
}

class CPU {
  -CPUStatus status (1..1)
  -Registers registers (1..1)
  -Register mRegister (1..1)
  -ProgramCounter programCounter (1..1)
  -Inbox inbox (1..1)
  -Outbox outbox (1..1)
  -Stacks stacks (1..1)
  -ALU alu (1..1)
  -Program program (1..1)

  +reset(): CPU
  +load(Program program): CPU
  +execute(): CPU
  +step(): CPU

  -storeInMemory(int memoryAddress, Value value): CPU
  -fetchFromMemory(int memoryAddress) : Value
  -storeInRegister(int memoryAddress, Value value): CPU
  -fetchFromRegister(int memoryAddress) : Value
  -add(Value a, Value b): Value
  -subtract(Value a, Value b): Value
}

enum CPUStatus {
  READY
  BUSY
  PAUSED
  HALTED
}

class Program {
  -statements (0..n)
}

interface Assembler {
  +assemble(programAsText): Program
}

CPU -down-> Registers
CPU -down-> Register
CPU -down-> Inbox
CPU -down-> Outbox
CPU -right-> ALU
CPU -down-> Memory
CPU -left-> Stacks
CPU -down-> Program
CPU -down-> ProgramCounter
CPU -left-> CPUStatus
Memory -down-> MemoryCell
Registers -down-> Register
MemoryCell -down-> Value
Register -down-> Value
Inbox -down-> Stack
Outbox -down-> Stack
Stacks -down-> Stack
Stack -down-> Value
ALU -down-> Value
Assembler .down.> Program
ProgramCounter -down-> Value

@enduml